package javaapplication1;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

public class Acceuil extends JFrame {
    private static JPanel contentPanel;

    
    public Acceuil() {
        
        setTitle("Acceuil");
        setExtendedState(JFrame.MAXIMIZED_BOTH);  
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);  // Centrer la fenêtre
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
       
        JPanel topBar = Booking();
        mainPanel.add(topBar, BorderLayout.NORTH);

        contentPanel = new JPanel(new BorderLayout());
        mainPanel.add(contentPanel, BorderLayout.CENTER);
        pageAcceuil();
        setContentPane(mainPanel);
        setVisible(true); 
    }

    private JPanel Booking() {
        JPanel topBar = new JPanel();
        topBar.setLayout(new BoxLayout(topBar, BoxLayout.Y_AXIS));  
        JPanel bookingPanel = new JPanel(new BorderLayout());
        bookingPanel.setBackground(new Color(0, 0, 255)); 
        bookingPanel.setBorder(BorderFactory.createEmptyBorder(15, 30, 15, 30));

        JLabel titleBooking = new JLabel("Booking.com");
        titleBooking.setFont(new Font("SansSerif", Font.BOLD, 25));
        titleBooking.setForeground(Color.WHITE);
        bookingPanel.add(titleBooking, BorderLayout.WEST);

        JButton btnRetour = new JButton("Mon Compte");
        btnRetour.setFocusPainted(false);
        btnRetour.setBackground(new Color(255, 255, 255));
        btnRetour.setForeground(Color.BLUE);
        btnRetour.setFont(new Font("SansSerif", Font.BOLD, 16));
        btnRetour.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnRetour.setPreferredSize(new Dimension(180, 40));
        btnRetour.addActionListener(e -> {
            dispose();
            new MonCompte(); 
        });

        bookingPanel.add(btnRetour, BorderLayout.EAST);
        topBar.add(bookingPanel);  
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        titlePanel.setBackground(new Color(0, 0, 255)); 
        titlePanel.setBorder(BorderFactory.createEmptyBorder(20, 100, 20, 30)); // marge: top, left, bottom, right

        JLabel titreSejour = new JLabel("Trouvez votre prochain séjour");
        titreSejour.setFont(new Font("SansSerif", Font.BOLD, 40));
        titreSejour.setForeground(Color.WHITE);
        titlePanel.add(titreSejour);


        topBar.add(titlePanel);  
        return topBar;
    }

    private static void pageAcceuil() {
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));

        JPanel barreRecherche = new JPanel();
        barreRecherche.setLayout(new BoxLayout(barreRecherche, BoxLayout.X_AXIS));
        barreRecherche.setBorder(BorderFactory.createLineBorder(Color.ORANGE, 4, true));
        barreRecherche.setBackground(Color.WHITE);
        barreRecherche.setMaximumSize(new Dimension(1200, 60)); 
        barreRecherche.setPreferredSize(new Dimension(1200, 60)); 
        barreRecherche.setAlignmentX(Component.CENTER_ALIGNMENT);

        JPanel destinationPanel = new JPanel(new BorderLayout());
        destinationPanel.setBackground(Color.WHITE);

        ArrayList<String> villes = new ArrayList<>(Arrays.asList(
                "Paris", "Lyon", "Lille", "Nice", "Nantes", "New York", "Los Angeles", "Londres", "Tokyo"
        ));

        villes.add(0, " Où allez-vous ?");
        JComboBox<String> villeComboBox = new JComboBox<>(villes.toArray(new String[0]));
        villeComboBox.setSelectedIndex(0);
        villeComboBox.addActionListener(e -> {
            if (villeComboBox.getSelectedIndex() != 0) {
                villeComboBox.removeItemAt(0);
            }
        });
        villeComboBox.setMaximumRowCount(10);
        villeComboBox.setFont(new Font("SansSerif", Font.PLAIN, 14));
        villeComboBox.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        villeComboBox.setBackground(Color.WHITE);
        destinationPanel.add(villeComboBox, BorderLayout.CENTER);
        barreRecherche.add(destinationPanel);
        barreRecherche.add(ligneSeparation());

        JPanel calendrierPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        calendrierPanel.setLayout(new BoxLayout(calendrierPanel, BoxLayout.Y_AXIS));
        calendrierPanel.setBackground(Color.WHITE);

        DatePickerSettings settingsArrivee = new DatePickerSettings(Locale.FRENCH);
        DatePickerSettings settingsDepart = new DatePickerSettings(Locale.FRENCH);

        settingsArrivee.setAllowEmptyDates(false);
        settingsDepart.setAllowEmptyDates(false);

        DatePicker dateArrivee = new DatePicker(settingsArrivee);
        DatePicker dateDepart = new DatePicker(settingsDepart);

        dateArrivee.getComponentDateTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                dateArrivee.openPopup();
            }
        });

        dateDepart.getComponentDateTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                dateDepart.openPopup();
            }
        });
        JLabel labelDates = new JLabel("Date d'arrivée — Date de départ\n");
        labelDates.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrage horizontal
        labelDates.setHorizontalAlignment(SwingConstants.CENTER); // Centre le texte dans le JLabel
        calendrierPanel.add(labelDates);

        JPanel datesPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
        datesPanel.setBackground(Color.WHITE);
        datesPanel.add(dateArrivee);
        datesPanel.add(new JLabel(" — "));
        datesPanel.add(dateDepart);
        calendrierPanel.add(datesPanel);
        barreRecherche.add(calendrierPanel);

        barreRecherche.add(ligneSeparation());
        
        int[] nbAdultes = {1};
        int[] nbEnfants = {0};
        int[] nbChambres = {1};

        JTextField personnesField = new JTextField(nbAdultes[0] + " adulte · " + nbEnfants[0] + " enfant · " + nbChambres[0] + " chambre");
        personnesField.setEditable(false);
        personnesField.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        personnesField.setForeground(Color.BLACK);
        personnesField.setBackground(Color.WHITE);

        // Popup menu
        JPopupMenu popup = new JPopupMenu();
        popup.setLayout(new GridLayout(3, 4, 10, 10));

        String[] labels = {"Adultes", "Enfants", "Chambres"};
        int[] counts[] = {nbAdultes, nbEnfants, nbChambres};

        for (int i = 0; i < 3; i++) {
            JLabel label = new JLabel(labels[i]);
            label.setHorizontalAlignment(SwingConstants.CENTER);

            JButton minus = new JButton("−");
            JLabel countLabel = new JLabel(String.valueOf(counts[i][0]), SwingConstants.CENTER);
            JButton plus = new JButton("+");

            int index = i; // final or effectively final

            minus.addActionListener(e -> {
                if (counts[index][0] > 0) {
                    counts[index][0]--;
                    countLabel.setText(String.valueOf(counts[index][0]));
                    personnesFieldNv(personnesField, nbAdultes[0], nbEnfants[0], nbChambres[0]);
                }
            });

            plus.addActionListener(e -> {
                counts[index][0]++;
                countLabel.setText(String.valueOf(counts[index][0]));
                personnesFieldNv(personnesField, nbAdultes[0], nbEnfants[0], nbChambres[0]);
            });

            popup.add(label);
            popup.add(minus);
            popup.add(countLabel);
            popup.add(plus);
        }

        // Ouvrir le popup au clic
        personnesField.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                popup.show(personnesField, 0, personnesField.getHeight());
            }
        });

        // Ajout au panel
        barreRecherche.add(personnesField);
        barreRecherche.add(ligneSeparation());

        JPanel panelRechercher = new JPanel(new BorderLayout());
        panelRechercher.setBackground(new Color(0, 100, 255));
        panelRechercher.setMaximumSize(new Dimension(200, 100));
        panelRechercher.setPreferredSize(new Dimension(200, 100));
        panelRechercher.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));

        JButton rechercherBtn = new JButton("Rechercher");
        rechercherBtn.setFocusPainted(false);
        rechercherBtn.setBackground(new Color(0, 150, 255));
        rechercherBtn.setForeground(Color.WHITE);
        rechercherBtn.setFont(new Font("SansSerif", Font.BOLD, 14));
        barreRecherche.add(rechercherBtn);

        panelRechercher.add(rechercherBtn, BorderLayout.CENTER);
        barreRecherche.add(panelRechercher);

        centerPanel.add(barreRecherche);
        contentPanel.removeAll();
        contentPanel.add(centerPanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }

    private static JComponent ligneSeparation() {
        JPanel sep = new JPanel();
        sep.setPreferredSize(new Dimension(4, 40));
        sep.setMaximumSize(new Dimension(4, Integer.MAX_VALUE));
        sep.setBackground(Color.ORANGE);
        return sep;
    }
    
    private static void personnesFieldNv(JTextField field, int adultes, int enfants, int chambres) {
        String text = adultes + " adulte" + (adultes > 1 ? "s" : "") + " · " + enfants + " enfant" + (enfants > 1 ? "s" : "") + " · "+ chambres + " chambre" + (chambres > 1 ? "s" : "");
        field.setText(text);
}
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Acceuil acceuil = new Acceuil();  
            acceuil.setVisible(true);        
        });
    }
    
}
