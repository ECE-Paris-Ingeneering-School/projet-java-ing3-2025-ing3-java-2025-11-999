package javaapplication1;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

public class JavaApplication1 {
    private static JPanel contentPanel;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Barre de recherche - Style Booking");
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setLocationRelativeTo(null);

            JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
            mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            JPanel topBar = new JPanel(new BorderLayout());
            JLabel siteName = new JLabel("Booking.com");
            siteName.setFont(new Font("SansSerif", Font.BOLD, 25));

            JButton monCompteBtn = new JButton("Mon compte");
            monCompteBtn.setFocusPainted(false);
            monCompteBtn.addActionListener(e -> ouvrirPageMonCompte());

            topBar.add(siteName, BorderLayout.WEST);
            topBar.add(monCompteBtn, BorderLayout.EAST);
            mainPanel.add(topBar, BorderLayout.NORTH);

            contentPanel = new JPanel(new BorderLayout());
            mainPanel.add(contentPanel, BorderLayout.CENTER);

            afficherPageAccueil();

            frame.setContentPane(mainPanel);
            frame.setVisible(true);
        });
    }

    private static void afficherPageAccueil() {
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));

        JLabel titre = new JLabel("Trouver votre séjour");
        titre.setFont(new Font("SansSerif", Font.BOLD, 24));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);
        titre.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        centerPanel.add(titre);

        JPanel barreRecherche = new JPanel();
        barreRecherche.setLayout(new BoxLayout(barreRecherche, BoxLayout.X_AXIS));
        barreRecherche.setBorder(BorderFactory.createLineBorder(Color.ORANGE, 2, true));
        barreRecherche.setBackground(Color.WHITE);
        barreRecherche.setMaximumSize(new Dimension(Integer.MAX_VALUE, 60));
        barreRecherche.setAlignmentX(Component.CENTER_ALIGNMENT);

        JPanel destinationPanel = new JPanel(new BorderLayout());
        destinationPanel.setBackground(Color.WHITE);

        ArrayList<String> villes = new ArrayList<>(Arrays.asList(
                "Paris", "Lyon", "Lille", "Nice", "Nantes", "New York", "Los Angeles", "Londres", "Tokyo"
        ));

        villes.add(0, " Où allez-vous ?");
        JComboBox<String> villeComboBox = new JComboBox<>(villes.toArray(new String[0]));
        villeComboBox.setSelectedIndex(0);

        // Si l'utilisateur choisit une vraie ville, on masque le placeholder
        villeComboBox.addActionListener(e -> {
            if (villeComboBox.getSelectedIndex() != 0) {
                villeComboBox.removeItemAt(0); // Enlève le placeholder
            }
        });
        villeComboBox.setMaximumRowCount(10);
        villeComboBox.setFont(new Font("SansSerif", Font.PLAIN, 14));
        villeComboBox.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        villeComboBox.setBackground(Color.WHITE);

        destinationPanel.add(villeComboBox, BorderLayout.CENTER);
        barreRecherche.add(destinationPanel);
        barreRecherche.add(createSeparator());

        JPanel calendrierPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        calendrierPanel.setLayout(new BoxLayout(calendrierPanel, BoxLayout.Y_AXIS));
        calendrierPanel.setBackground(Color.WHITE);

        DatePickerSettings settingsArrivee = new DatePickerSettings(Locale.FRENCH);
        DatePickerSettings settingsDepart = new DatePickerSettings(Locale.FRENCH);

        settingsArrivee.setAllowEmptyDates(false);
        settingsDepart.setAllowEmptyDates(false);

        DatePicker dateArrivee = new DatePicker(settingsArrivee);
        DatePicker dateDepart = new DatePicker(settingsDepart);

        dateArrivee.getComponentDateTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                dateArrivee.openPopup();
            }
        });

        dateDepart.getComponentDateTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                dateDepart.openPopup();
            }
        });
        calendrierPanel.add(new JLabel("Date arrivé — départ "));
        JPanel datesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        datesPanel.setBackground(Color.WHITE);
        datesPanel.add(dateArrivee);
        datesPanel.add(new JLabel(" — "));
        datesPanel.add(dateDepart);
        calendrierPanel.add(datesPanel);
        barreRecherche.add(calendrierPanel);

        barreRecherche.add(createSeparator());
        
        int[] nbAdultes = {1};
        int[] nbEnfants = {0};
        int[] nbChambres = {1};

        JTextField personnesField = new JTextField(nbAdultes[0] + " adulte · " + nbEnfants[0] + " enfant · " + nbChambres[0] + " chambre");
        personnesField.setEditable(false);
        personnesField.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        personnesField.setForeground(Color.BLACK);
        personnesField.setBackground(Color.WHITE);

        // Popup menu
        JPopupMenu popup = new JPopupMenu();
        popup.setLayout(new GridLayout(3, 4, 10, 10));

        String[] labels = {"Adultes", "Enfants", "Chambres"};
        int[] counts[] = {nbAdultes, nbEnfants, nbChambres};

        for (int i = 0; i < 3; i++) {
            JLabel label = new JLabel(labels[i]);
            label.setHorizontalAlignment(SwingConstants.LEFT);

            JButton minus = new JButton("−");
            JLabel countLabel = new JLabel(String.valueOf(counts[i][0]), SwingConstants.CENTER);
            JButton plus = new JButton("+");

            int index = i; // final or effectively final

            minus.addActionListener(e -> {
                if (counts[index][0] > 0) {
                    counts[index][0]--;
                    countLabel.setText(String.valueOf(counts[index][0]));
                    updatePersonnesField(personnesField, nbAdultes[0], nbEnfants[0], nbChambres[0]);
                }
            });

            plus.addActionListener(e -> {
                counts[index][0]++;
                countLabel.setText(String.valueOf(counts[index][0]));
                updatePersonnesField(personnesField, nbAdultes[0], nbEnfants[0], nbChambres[0]);
            });

            popup.add(label);
            popup.add(minus);
            popup.add(countLabel);
            popup.add(plus);
        }

        // Ouvrir le popup au clic
        personnesField.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                popup.show(personnesField, 0, personnesField.getHeight());
            }
        });

        // Ajout au panel
        barreRecherche.add(personnesField);
        barreRecherche.add(createSeparator());

        JPanel panelRechercher = new JPanel(new BorderLayout());
        panelRechercher.setBackground(new Color(0, 102, 255));
        panelRechercher.setMaximumSize(new Dimension(200, 100));
        panelRechercher.setPreferredSize(new Dimension(200, 100));
        panelRechercher.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

        JButton rechercherBtn = new JButton("Rechercher");
        rechercherBtn.setFocusPainted(false);
        rechercherBtn.setBackground(new Color(0, 102, 255));
        rechercherBtn.setForeground(Color.WHITE);
        rechercherBtn.setFont(new Font("SansSerif", Font.BOLD, 14));
        barreRecherche.add(rechercherBtn);

        panelRechercher.add(rechercherBtn, BorderLayout.CENTER);
        barreRecherche.add(panelRechercher);

        centerPanel.add(barreRecherche);
        contentPanel.removeAll();
        contentPanel.add(centerPanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }

    private static void ouvrirPageMonCompte() {
        contentPanel.removeAll();

        JPanel monComptePanel = new JPanel(new BorderLayout());
        JLabel message = new JLabel("Bienvenue dans votre espace compte !");
        message.setFont(new Font("SansSerif", Font.PLAIN, 16));
        message.setHorizontalAlignment(SwingConstants.CENTER);

        monComptePanel.add(message, BorderLayout.CENTER);
        contentPanel.add(monComptePanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }

    private static JTextField createChamp(String placeholder) {
        JTextField champ = new JTextField(placeholder);
        champ.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        champ.setForeground(Color.GRAY);

        champ.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (champ.getText().equals(placeholder)) {
                    champ.setText("");
                    champ.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (champ.getText().isEmpty()) {
                    champ.setText(placeholder);
                    champ.setForeground(Color.GRAY);
                }
            }
        });

        return champ;
    }

    private static JComponent createSeparator() {
        JPanel sep = new JPanel();
        sep.setPreferredSize(new Dimension(2, 40));
        sep.setMaximumSize(new Dimension(2, Integer.MAX_VALUE));
        sep.setBackground(Color.ORANGE);
        return sep;
    }
    
    private static void updatePersonnesField(JTextField field, int adultes, int enfants, int chambres) {
    String text = adultes + " adulte" + (adultes > 1 ? "s" : "") + " · "
            + enfants + " enfant" + (enfants > 1 ? "s" : "") + " · "
            + chambres + " chambre" + (chambres > 1 ? "s" : "");
    field.setText(text);
}
}
